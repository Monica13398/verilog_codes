module d5m_de2_70 (
							input wire clk,
							/*d5m_i2c --- Declaration*/
							inout wire sda,scl,
							
							/*module d5m_ccd(p_data,fval,lval,p_clk,p_rst,trig,str);*/
							/*d5m_ccd --- Declaration*/

							inout [11:0] p_data,
							input p_clk,
							inout fval,lval,p_rst,trig,str,
							inout reg x_clk = 0,
							/*module ssram (clk,ss_clk,ss_addr,ss_data,oe,we,bwe,adsp,adsc,adv,gw,ce1,ce2,ce3,ss_dout,zz);*/
							/*d5m_ssram --- Declaration*/
							inout reg [31:0] ss_dat,
							inout [3:0] dp,
							output [18:0] ss_addr,
							output ss_clk,
							output ce1,ce2,ce3,
							output reg [3:0] bwe,
							output reg adsp = 0, adsc = 1, adv = 1;
							output reg gw,
							output oe,
							output we,
							output zz,

							/*module d5m_vga(vga_clk,vga_sync,vs,hs,blank,o);*/
							/*d5m_vga --- Declaration*/
							output reg vga_clk = 0,// 
							output reg [29:0]o,
							output reg hs,vs,
							output vga_sync,
							output blank
);



//---------------------------i2c-------------------------------------
			i2c_70 sr (
							.clk(clk),
							.sda(sda),
							.scl(scl)
						 );

/******************************************Registers************************************************************************/
							reg 				f_count 			= 0;	                //d5m_ccd//
							reg [9:0]		l_count 			= 0;
							reg [9:0]		mem_count 		= 0;
							reg [7:0]		p_mem[0:639];
							reg [11:0]		p_count 			= 0;

							reg [9:0]		d_count 			= 0;					//d5m_ssram//
							reg [18:0]		wr_addr 			= 0, 
												rd_addr 			= 0;
							reg [3:0]		rd_count 		= 0;
							reg [1:0]		r_ctrl 			= 0;
							reg [3:0] 		rd_state 		= 1;
							reg 				s_sync 			= 1;

							reg [3:0]		mode;
							reg [3:0]		wr_mode 			= 4'b0101;
							reg [3:0] 		rd_mode 			= 4'b0100;
							reg [3:0]		no 				= 4'b1011;

							reg [9:0] 		hc 				= 0;						//d5m_vga//
							reg [9:0] 		vc 				= 0;	
							reg 				a_en;
							reg 				a_clk 			= 0;
							reg 				b_clk 			= 0;
							reg [2:0] 		rgb_count 		= 0;
							reg 				vga_en 			= 0;

/**************************************Assignments ******************************************************************/
							assign 			p_rst 			= 1,
												trig 				= 1, 
												str 				= 1;

							assign 			ss_clk 			= clk;
							assign 			zz 				= 1;
							assign 			dp 				= 4'b0000;
							assign 			{ce1,ce2,ce3,oe} = mode; 

							assign 			we 				=(blank) ? 1 : 0;
							assign 			ss_addr 			= (!we) ? wr_addr : rd_addr;

							assign 			vga_sync 		= 0;
							assign 			blank				=(hc > 143 && hc < 784 && vc < 515 && vc > 34 )? 1 : 0;

////-------------------------------------------------------------------------------------------//

/*******************************d5m_ccd --- Instantiation**********************************************************************************/
		always@(posedge clk)		// d5m_ccd -- x_clk //
		  x_clk <= ~x_clk;
		  
		  
//************************************ d5m_ccd -- pixel data ************************************************************************// 
		always@(posedge p_clk)		
		begin
					if(fval & lval)
					begin
						 if(p_count == 1279)
												p_count 			<= 0;
						 else
												p_count 			<= p_count +1;
					end 
					else 
												p_count 			<= 0;
		end

		
//***************************************d5m_ccd -- line valid******************************************************************* //		
				
		always@(posedge lval)	
		begin
					if(l_count < 960)
												l_count 		<= l_count +1;
					else
												l_count 		<= 1;
		end

		
//*********************************************vga start***********************************************************************//			
		
		always@(negedge fval)
		 begin
												vga_en 		<= 1;
		 end 
 
		always@(negedge fval)
		 begin
												f_count 		<= ~f_count;
		 end 

		 
//******************************************** d5m_ccd -- Active pixel data *************************************************//		 
		 
		always@(posedge p_clk)		
		begin
				if(fval && lval) 
				begin
					if(l_count[0] == 1) 
					begin
							if(p_count[0] == 0 && l_count < 960) //
							 begin
										 p_mem[mem_count] <= p_data[11:4];
										
									 if(mem_count == 639)
									 
										    mem_count     <= mem_count;
										
									 else
									 
										    mem_count    	<= mem_count+1'b1;
									 end
							 else
								mem_count <= mem_count;
					 end
					 else
						mem_count <= 0;
				 end
		 end 


/******************************************d5m_vga clk***************************************************************/
always @(posedge clk)		// d5m_vga -- vga_clk //
 begin          
  vga_clk <= ~vga_clk;     
 end 

always @(posedge vga_clk)		// d5m_vga -- a_clk //  12.5
 begin          
  a_clk <= ~a_clk;
 end
 
always @(posedge a_clk)		// d5m_vga -- b_clk //    7.2 
 begin          
  b_clk <= ~b_clk;
 end

//************************************************************d5m_vga -- H & V***********************************************//
			 
			always@(posedge vga_clk)		
			 begin
					 if(vga_en) 
					 begin
							 if(hc < 799 && hc > 95)
							  hs <= 1;
							 else
							  hs <= 0;
							 if(hc < 799)
							  hc <= hc + 1;
							 else
							  hc <= 0;

							 if(vc < 525 && vc >= 2)
							  vs <= 1;
							 else 
							  vs <= 0;
							 if(hc == 799 && vc < 525)
							  vc <= vc + 1;
							 if(vc == 525)
							  vc <= 0;
					 end
			 end
//****************************************************vga -- Active********************************************//	
			always@ (posedge vga_clk)				
			begin
					if (blank) 
					begin
					case (rgb_count)
					  0: begin
						  o <= {{ss_data[7:0],2'b00},{ss_data[7:0],2'b00},{ss_data[7:0],2'b00}};
						  rgb_count <= 1;
						 end
						1: begin
						  o <= {{ss_data[15:8],2'b00},{ss_data[15:8],2'b00},{ss_data[15:8],2'b00}};   
						  rgb_count <= 2;
						 end
						2: begin  
						  o <= {{ss_data[23:16],2'b00},{ss_data[23:16],2'b00},{ss_data[23:16],2'b00}};
						  rgb_count <= 3;
						 end
						3: begin
						  o <= {{ss_data[31:24],2'b00},{ss_data[31:24],2'b00},{ss_data[31:24],2'b00}};
						  rgb_count <= 0;
						 end
					endcase
					end
					else  
					begin 
						 o <= 0;
					end
			end
 
 
 
 
 
 
 
 
endmodule 













































/*d5m_sram --- Instantiation*/
always@(posedge ss_clk)
 begin
  adsp <= 1;
  adsc <= 0;
  adv <= 0;
  gw <= 1;
  bwe <= 0000;
 end

always@(posedge ss_clk)		// d5m_ssram -- read_controller_operation //
 begin 
 if(vga_en == 1)
  begin
  case(r_ctrl)				
  2'd0 : begin
   if(f_count && hc == 0 &&  vc == 0)
   begin
    s_sync <= 1;
    r_ctrl <= 1;
   end
   else if(!f_count && hc == 0 &&  vc == 0) 
   begin
    s_sync <= 0;
    r_ctrl <= 2;
   end
  end
  2'd1 : begin
   if(f_count)
    r_ctrl <= 1;
   else if(!f_count)
   begin
   if(hc == 0 &&  vc == 0)
    r_ctrl <= 0;
   end 
   else
    r_ctrl <= 1;
   end
  2'd2 : begin
   if(!f_count)
    r_ctrl <= 2;
   else if(f_count)
   begin
   if(hc == 0 &&  vc == 0)
    r_ctrl <=0;
   end 
   else
    r_ctrl <= 2;
   end
  endcase
  end
 end

always@(posedge vga_clk)		// d5m_ssram -- write_operation //
begin
if(we == 0 && lval == 0 && l_count[0] == 1)
begin
			if(~f_count)
			begin
					mode <= wr_mode;
					
							ss_data <= {p_mem[d_count],p_mem[d_count +1],p_mem[d_count +2],p_mem[d_count +3]};
							if(wr_addr < 153600 && d_count < 640)
							wr_addr <= wr_addr +1;
							else
							wr_addr <= wr_addr;
				
				
					if(d_count == 640)
					d_count <= d_count;
					else    
					d_count <= d_count +4;
			end
			
			else
			begin
					mode <= wr_mode;
					ss_data <= {p_mem[d_count],p_mem[d_count +1],p_mem[d_count +2],p_mem[d_count +3]}; 
					if(wr_addr < 307200 && d_count < 640)
					wr_addr <= wr_addr +1;
					else
					wr_addr <= wr_addr;
					
						if(d_count == 640)
						d_count <= d_count;
						else
						d_count <= d_count +4;	        
			end
end
else if(wr_addr == 307200 && d_count == 640 && l_count == 960)
	wr_addr <= 0;
 else if(l_count[0] == 0)
	d_count <= 0;
	
	
	
	

 if(we && blank)		// d5m_ssram -- read_operation //			
  begin
  if(s_sync)
   begin
	 case(rd_state)
	 1'b0 :
	  begin
	  if(rd_addr < 153600) //128000)
	   begin
		 mode <= rd_mode;
	    ss_data <= 32'dz;
	    rd_state <= 1;
	   end
	  else
	   rd_addr <= 0;
	  end
	 1'b1 :
	  begin
	   mode <= no;
	   if(rd_count == 3)
	   begin
	    rd_addr <= rd_addr +1;
	    rd_state <= 0;
		 rd_count <= 0;
	   end
	   else
	    rd_state <=1;
	   end
	 endcase
	 end

	else if(!s_sync)
	 begin
	 case(rd_state)
	 1'b0 :
	  begin
	  if(rd_addr < 307200) //256000)
	   begin
		 mode <= rd_mode;
	    ss_data <= 32'dz;
	    rd_state <= 1;
	   end
	   else
	    rd_addr <= 153600; //128000;
	   end
	 1'b1 :
	  begin
	   mode <= no;
	  if(rd_count == 3)
	   begin
	    rd_addr <= rd_addr +1;
	    rd_state <= 0;
		 rd_count <= 0;
	   end
	   else
	    rd_state <= 1;
	   end
	 endcase
	 end
	end
  
end
 